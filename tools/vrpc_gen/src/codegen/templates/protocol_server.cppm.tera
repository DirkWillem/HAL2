{% import "macros" as macros -%}
module;

#include <type_traits>

export module {{module_name}}.{{ name }}.server;

import vrpc.server;

export import {{module_name}}.{{ name }};

namespace {{ package | package_to_namespace }} {

{% for _, svc in services %}
{% for _, method in svc.methods -%}
export template<typename Impl>
concept {{svc.name}}{{method.name}}Sync = requires(Impl& impl) {
  impl.{{method.name}}(
      std::declval<const {{ macros::msg_ref_class(msg=method.input_type) }}&>(),
      std::declval<{{ macros::msg_ref_class(msg=method.output_type) }}&>());
};

export template<typename Impl>
concept {{svc.name}}{{method.name}}Async = requires(Impl& impl) {
  impl.{{method.name}}Async(
      std::declval<const {{ macros::msg_ref_class(msg=method.input_type) }}&>(),
      std::declval<vrpc::AsyncResult<{{ macros::msg_ref_class(msg=method.output_type) }}>>());
};
{% endfor %}

export template<typename Impl>
concept {{svc.name}} = {% for _, method in svc.methods -%}
    {%- if not loop.first -%}&& {% endif -%}
    ({{- svc.name}}{{method.name}}Sync<Impl> || {{- svc.name}}{{method.name}}Async<Impl>)
{%- endfor %};
{% endfor %}

}
